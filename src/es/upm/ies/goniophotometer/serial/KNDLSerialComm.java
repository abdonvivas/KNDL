package es.upm.ies.goniophotometer.serial;

import java.util.ArrayList;

/**
 * Interface to communicate with a control device. Go to <a href=
 * "https://github.com/abdonvivas/KNDL">https://github.com/abdonvivas/KNDL</a>
 * for more information.
 * 
 * @author Abd&oacute;n Alejandro Vivas Imparato
 *
 */
public interface KNDLSerialComm {

	/**
	 * String to be sent when starting a new measure.
	 */
	public static final String START = "STR";
	/**
	 * String to be sent when stopping a measure.
	 */
	public static final String STOP = "STP";
	/**
	 * String to be sent when calibrating the measuring system system.
	 */
	public static final String CALIBRATE = "CAL";
	/**
	 * String received when new data comes in.
	 */
	public static final String DATA = "DAT";
	/**
	 * String received when a measure ended from the microprocessor side.
	 */
	public static final String END = "END";
	/**
	 * String received when the device acknowledge the receiving of a command.
	 */
	public static final String ACK = "ACK";
	/**
	 * Serial port separator.
	 */
	public static final String SEPARATOR = ";";
	/**
	 * Serial port communications timeout (milliseconds).
	 */
	public static final int SERIAL_COMM_TIMEOUT = 15000;

	/**
	 * Opens a serial port.
	 * 
	 * @throws Exception
	 *             If something goes wrong while opening the serial port.
	 */
	public void openSerialPort() throws Exception;

	/**
	 * Closes a serial port.
	 */
	public void closeSerialPort();

	/**
	 * Sends a string to the serial port.<br>
	 * 
	 * This method <b>does not opens, nor closes a serial port</b>. To open or
	 * close a serial port, use <code>openSerialPort()</code> and
	 * <code>closeSerialPort()</code>.
	 * 
	 * @param data
	 *            The String to be sent.
	 * @throws Exception
	 *             If something goes wrong during the sending of the data.
	 */
	public void sendData(String data) throws Exception;

	/**
	 * Receives data from the serial port.<br>
	 * Any implementation of this method <b>must</b> be a semi-blocking call. In
	 * other words, the read call must always return at least 1 byte of data
	 * without blocking indefinitely. Use <code>SERIAL_COMM_TIMEOUT</code> to
	 * prevent blocking indefinitely during your implementation.<br>
	 * This method <b>does not opens, nor closes a serial port</b>. To open or
	 * close a serial port, use <code>openSerialPort()</code> and
	 * <code>closeSerialPort()</code>.
	 * 
	 * @return A string representation of the data received from the serial
	 *         port.
	 * @throws Exception
	 *             If something goes wrong during the receiving of the data.
	 */
	public String receiveData() throws Exception;

	/**
	 * Returns an <code>ArrayList&#60;String&#62;</code> with the system-defined
	 * port names of all the available serial ports with connected devices (e.g.
	 * COM1, ttyS0,...).
	 * 
	 * @return A list with the system-defined port names of the available serial
	 *         ports with connected devices.
	 */
	public ArrayList<String> getComPorts();

	/**
	 * Returns an <code>ArrayList&#60;String&#62;</code> with the descriptions
	 * of the devices connected to the available serial ports. This descriptions
	 * are generated by the operating system and may not be a good
	 * representation of the devices described. If you are implementing this
	 * method and for some reason you can't obtain the device descriptions, then
	 * make a call to <code>getComPorts()</code> and return its results.
	 * 
	 * @return A list with the descriptions of the devices connected to the
	 *         available serial ports.
	 */
	public ArrayList<String> getComPortDescriptions();

	/**
	 * Returns the description of the device connected to the serial port with
	 * <code>portName</code>. If you are implementing this method and for some
	 * reason you can't obtain the device descriptions, return an empty string.
	 * 
	 * @param portName
	 *            The system-defined name (e.g. COM1, ttyS0,...) of the port.
	 * @return The description of the port with <code>portName</code>
	 */
	public String getComPortDescription(String portName);

	/**
	 * Checks if the port with the specified specified port name is between the
	 * available serial ports with connected devices.
	 * 
	 * @param portName
	 *            The system-defined name (e.g. COM1, ttyS0,...) of the port to
	 *            be checked.
	 * @return True, if <code>portName</code> is within the available serial
	 *         ports. False if it is not.
	 */
	public boolean checkSerialPort(String portName);

	/**
	 * Attempts to match the specified regular expression against all of the
	 * descriptions of the devices connected to the available serial ports. If
	 * there is a match, returns the system-defined port name (e.g. COM1,
	 * ttyS0,...) for that port. Otherwise, returns an empty string. If you are
	 * implementing this method and for some reason you can't obtain the device
	 * descriptions, you have two options: <br>
	 * &nbsp;1. Match the regular expression to the system-defined port names of
	 * all the available serial ports with connected devices (e.g. COM1,
	 * ttyS0,...).<br>
	 * &nbsp;2. Return always an empty string.
	 * 
	 * @param regularExpression
	 *            Regular experession to be matched.
	 * @return The system-defined port name of the matched device. If there is
	 *         no match, an empty string.
	 */
	public String matchRegEx(String regularExpression);
}
